name: Konnect - OpenAPI to Kong 

on:
  push:
    branches:
      - main
    paths:
      - "konnect/**/openapi.yaml"
  workflow_dispatch:

jobs:
  convert-specs-to-deck:
    name: Convert OAS to decK 
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.collect-context.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup deck
        uses: kong/setup-deck@v1
        with:
          deck-version: '1.44.1'
          wrapper: false

      - name: Collect and convert OAS files 
        id: collect-context
        run: |
          echo "Gathering all konnect/**/openapi.yaml files in the repository..."
          ALL_OAS_FILES=$(find konnect -type f -name "openapi.yaml")

          echo "All OAS files:"
          echo "$ALL_OAS_FILES"

          OUTPUT_MATRIX=()
          MODIFIED_FILES=()

          for FILE in $ALL_OAS_FILES; do

            ORG=$(echo "$FILE" | grep -oP 'konnect/[^/]+' | cut -d '/' -f2)
            TEAM=$(echo "$FILE" | grep -oP 'teams/[^/]+' | cut -d '/' -f2)
            ENV=$(echo "$FILE" | grep -oP 'envs/[^/]+' | cut -d '/' -f2)
            SERVICE_NAME=$(echo "$FILE" | grep -oP 'services/[^/]+' | cut -d '/' -f2)

            echo "Processing: Org=$ORG, Team=$TEAM, Environment=$ENV, Service=$SERVICE_NAME, File=$FILE"

            if [[ -n "$TEAM" && -n "$ENV" && -n "$SERVICE_NAME" ]]; then
              PATCH_FILE=$(dirname "$FILE")/ko-patch.yaml
              OUTPUT_FILE=$(dirname "$FILE")/kong-from-oas.yaml

              if [[ -f "$PATCH_FILE" ]]; then
                deck file openapi2kong -s $FILE | \
                  deck file patch "$PATCH_FILE" -o "$OUTPUT_FILE"
              else
                deck file openapi2kong -s $FILE -o "$OUTPUT_FILE"
              fi
                
              if [[ -f "$OUTPUT_FILE" ]]; then
                # Check if the file is tracked in Git
                if git ls-files --error-unmatch "$OUTPUT_FILE" &>/dev/null; then
                  # The file is tracked, check if it changed
                  if ! git diff --quiet "$OUTPUT_FILE"; then
                    echo "File modified: $OUTPUT_FILE"
                    MODIFIED_FILES+=("$OUTPUT_FILE")
                    OUTPUT_MATRIX+=("{\"org\":\"$ORG\",\"team\":\"$TEAM\",\"env\":\"$ENV\",\"service\":\"$SERVICE_NAME\",\"file\":\"$OUTPUT_FILE\"}")
                  else
                    echo "No changes detected in tracked file: $OUTPUT_FILE"
                    # No action needed if you only care about changed or newly created files
                  fi
                else
                  # The file is not tracked, so it's newly created
                  echo "File created: $OUTPUT_FILE"
                  MODIFIED_FILES+=("$OUTPUT_FILE")
                  OUTPUT_MATRIX+=("{\"org\":\"$ORG\",\"team\":\"$TEAM\",\"env\":\"$ENV\",\"service\":\"$SERVICE_NAME\",\"file\":\"$OUTPUT_FILE\"}")
                fi
              else
                echo "Failed to convert file: $FILE"
                exit 1
              fi
            else 
              echo "Skipping file (no team/env/service found): $FILE"
            fi
          done

          # Upload modified files as artifacts
          for FILE in "${MODIFIED_FILES[@]}"; do
            mkdir -p upload_dir/$(dirname "$FILE")
            cp "$FILE" upload_dir/"$FILE"
          done

          MATRIX=$(printf '[%s]' "$(printf '%s,' "${OUTPUT_MATRIX[@]}" | sed 's/,$//')")
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload modified files as artifacts
        if: ${{ steps.collect-context.outputs.matrix != '[]' }}
        uses: actions/upload-artifact@v4
        with:
          name: modified-kong-yaml-files
          path: upload_dir/

  process-changes:
    name: Process and stage converted files
    needs: [convert-specs-to-deck]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        context: ${{ fromJson(needs.convert-specs-to-deck.outputs.matrix) }}
      max-parallel: 1
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Download modified files
        uses: actions/download-artifact@v4
        with:
          name: modified-kong-yaml-files
          path: ./download_dir/
  
      - name: Place modified files in working directory
        run: |
          FILE_PATH="${{ matrix.context.file }}"
          TARGET_DIR=$(dirname "$FILE_PATH")
          mkdir -p "$TARGET_DIR"
          cp "download_dir/$FILE_PATH" "$FILE_PATH"
          echo "Wrote file: $FILE_PATH"
  
      - name: Stage modified file
        run: |
          FILE_PATH="${{ matrix.context.file }}"
          git add "$FILE_PATH"
          echo "Staged file: $FILE_PATH"
  
      - name: Extract context from matrix
        id: extract-context
        run: |
          ORG="${{ matrix.context.org }}"
          TEAM="${{ matrix.context.team }}"
          ENV="${{ matrix.context.env }}"
          FILE_PATH="${{ matrix.context.file }}"
          DIR=$(dirname "$FILE_PATH")
          FILE_NAME=$(basename "$FILE_PATH")
          echo "Processing: Org=$ORG, Team=$TEAM, Environment=$ENV, File=$FILE_PATH"
          echo "org=$ORG" >> $GITHUB_OUTPUT
          echo "team=$TEAM" >> $GITHUB_OUTPUT
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "file=$FILE_PATH" >> $GITHUB_OUTPUT
          echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
          echo "dir=$DIR" >> $GITHUB_OUTPUT
  
      - name: Create PR for changes
        uses: peter-evans/create-pull-request@v5
        with:
          title: "[Konnect] [${{ steps.extract-context.outputs.env }}] - ${{ steps.extract-context.outputs.team }} Spec to decK"
          branch: "spec-to-deck/${{ steps.extract-context.outputs.DIR }}"
          labels: "${{ steps.extract-context.outputs.team }},${{ steps.extract-context.outputs.env }},kong,konnect"
          commit-message: "Converted OAS to decK for ${{ steps.extract-context.outputs.file}}" 
          body: |
            This PR was automatically generated by the 'Konnect - OpenAPI to Kong' workflow.
            - Organization: ${{ steps.extract-context.outputs.org }}
            - Team: ${{ steps.extract-context.outputs.team }}
            - Environment: ${{ steps.extract-context.outputs.env }}
            - File: ${{ steps.extract-context.outputs.file }}
            - Directory: ${{ steps.extract-context.outputs.DIR }}
